
# Property State Logging Stream
# Replaces custom Parquet writer in state_manager.go

input:
  resource: property_updates_input

pipeline:
  processors:
    # Check if Parquet logging is enabled by license
    - label: check_license
      branch:
        request_map: |
          root = if !meta("skip_license_check").or(false) {
            "feature": "parquet_logging"
          }
        processors:
          - plugin:
              path: /etc/twincore/plugins/license_checker.wasm
              # Fallback to mapping if plugin not available
          - catch:
              - mapping: |
                  # Default behavior if license check fails
                  root = if !exists("features.storage") || !this.features.storage.contains("parquet_logging") {
                    deleted()
                  }
    
    # Format property record for Parquet
    - label: format_property_record
      mapping: |
        root.thing_id = this.thing_id
        root.property_name = this.property_name
        root.value = this.value.string()
        root.timestamp = if meta("timestamp").exists() {
          meta("timestamp")
        } else {
          timestamp_unix_nano()
        }
        root.source = if meta("source").exists() {
          meta("source")
        } else {
          "unknown"
        }
    
    # Encode to Parquet format
    - label: encode_parquet
      parquet_encode:
        schema:
          - name: thing_id
            type: BYTE_ARRAY
            converted_type: UTF8
            repetition_type: REQUIRED
          - name: property_name
            type: BYTE_ARRAY
            converted_type: UTF8
            repetition_type: REQUIRED
          - name: value
            type: BYTE_ARRAY
            converted_type: UTF8
            repetition_type: REQUIRED
          - name: timestamp
            type: INT64
            converted_type: TIMESTAMP_NANOS
            repetition_type: REQUIRED
          - name: source
            type: BYTE_ARRAY
            converted_type: UTF8
            repetition_type: REQUIRED
        default_compression: SNAPPY

output:
  label: property_parquet_output
  file:
    path: "${PARQUET_LOG_PATH:./twincore_data}/properties/props_${!timestamp_unix():2006-01-02}.parquet"
    codec: all-bytes
  processors:
    # Batch messages for better performance
    - label: batch_properties
      batch:
        count: ${PARQUET_BATCH_SIZE:100}
        period: ${PARQUET_BATCH_PERIOD:5s}
        byte_size: ${PARQUET_BATCH_BYTES:5MB}

# Resource definitions for input
resources:
  - label: property_updates_input
    # This can be configured to receive from different sources
    # Default: in-memory channel
    inproc:
      name: property_updates
    # Alternative: Kafka input (if licensed)
    # kafka:
    #   addresses: ["${KAFKA_BROKERS:localhost:9092}"]
    #   topics: ["twincore.property.updates"]
    #   consumer_group: "twincore-property-logger"