package types

import "time"

// User Management API types that align with caddy-security integration

// CreateUserRequest represents a request to create a new user
// This aligns with the AuthUser structure expected by caddy-security
type CreateUserRequest struct {
	Username string   `json:"username" example:"john.doe" binding:"required"`
	Email    string   `json:"email" example:"john@example.com" binding:"required,email"`
	FullName string   `json:"name,omitempty" example:"John Doe"`
	Password string   `json:"password" example:"securePassword123" binding:"required,min=8"`
	Roles    []string `json:"roles" example:"[\"viewer\", \"operator\"]"`
	Disabled bool     `json:"disabled,omitempty" example:"false"`
}

// UpdateUserRequest represents a request to update user details
type UpdateUserRequest struct {
	Email    string   `json:"email,omitempty" example:"john@example.com" binding:"omitempty,email"`
	FullName string   `json:"name,omitempty" example:"John Doe"`
	Roles    []string `json:"roles,omitempty" example:"[\"admin\"]"`
	Disabled *bool    `json:"disabled,omitempty" example:"false"`
}

// UserResponse represents a user in API responses
// This matches the AuthUser structure but excludes sensitive data like password
type UserResponse struct {
	ID        string            `json:"id" example:"john.doe"`
	Username  string            `json:"username" example:"john.doe"`
	Email     string            `json:"email" example:"john@example.com"`
	FullName  string            `json:"name,omitempty" example:"John Doe"`
	Roles     []string          `json:"roles" example:"[\"viewer\"]"`
	Disabled  bool              `json:"disabled" example:"false"`
	CreatedAt string            `json:"created_at" example:"2023-12-01T10:30:00Z"`
	UpdatedAt string            `json:"updated_at" example:"2023-12-01T10:30:00Z"`
	LastLogin *string           `json:"last_login,omitempty" example:"2023-12-01T10:30:00Z"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// ChangePasswordRequest represents a password change request
type ChangePasswordRequest struct {
	CurrentPassword string `json:"current_password" example:"oldPassword123" binding:"required"`
	NewPassword     string `json:"new_password" example:"newPassword456" binding:"required,min=8"`
}

// LoginRequest represents user authentication credentials
type LoginRequest struct {
	Username string `json:"username" example:"john.doe" binding:"required"`
	Password string `json:"password" example:"securePassword123" binding:"required"`
}

// LoginResponse represents a successful authentication response
// This would be generated by caddy-security, but we define it for API documentation
type LoginResponse struct {
	AccessToken  string       `json:"access_token" example:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."`
	RefreshToken string       `json:"refresh_token,omitempty" example:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."`
	TokenType    string       `json:"token_type" example:"Bearer"`
	ExpiresIn    int          `json:"expires_in" example:"3600"`
	User         UserResponse `json:"user"`
}

// RefreshTokenRequest represents a token refresh request
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token" example:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." binding:"required"`
}

// UserListResponse represents a paginated list of users
type UserListResponse struct {
	Users []UserResponse `json:"users"`
	Total int            `json:"total" example:"42"`
	Page  int            `json:"page" example:"1"`
	Limit int            `json:"limit" example:"10"`
}

// Helper functions to convert between API types and internal types

// ToLocalUser converts a CreateUserRequest to the internal LocalUser type
func (req *CreateUserRequest) ToLocalUser() *LocalUser {
	return &LocalUser{
		Username:  req.Username,
		Email:     req.Email,
		FullName:  req.FullName,
		Roles:     req.Roles,
		Disabled:  req.Disabled,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
}

// FromLocalUser converts a LocalUser to a UserResponse for API output
func FromLocalUser(localUser *LocalUser) *UserResponse {
	response := &UserResponse{
		ID:        localUser.Username, // Using username as ID
		Username:  localUser.Username,
		Email:     localUser.Email,
		FullName:  localUser.FullName,
		Roles:     localUser.Roles,
		Disabled:  localUser.Disabled,
		CreatedAt: localUser.CreatedAt.UTC().Format(time.RFC3339),
		UpdatedAt: localUser.UpdatedAt.UTC().Format(time.RFC3339),
	}

	if !localUser.LastLogin.IsZero() {
		lastLogin := localUser.LastLogin.UTC().Format(time.RFC3339)
		response.LastLogin = &lastLogin
	}

	return response
}

// ApplyUpdate applies an UpdateUserRequest to an existing LocalUser
func (req *UpdateUserRequest) ApplyUpdate(localUser *LocalUser) {
	if req.Email != "" {
		localUser.Email = req.Email
	}
	if req.FullName != "" {
		localUser.FullName = req.FullName
	}
	if req.Roles != nil {
		localUser.Roles = req.Roles
	}
	if req.Disabled != nil {
		localUser.Disabled = *req.Disabled
	}
	localUser.UpdatedAt = time.Now()
}

// NewUserResponse creates a new user response
func NewUserResponse(id, username, email, fullName string, roles []string, disabled bool, createdAt, updatedAt time.Time, lastLogin *time.Time) *UserResponse {
	response := &UserResponse{
		ID:        id,
		Username:  username,
		Email:     email,
		FullName:  fullName,
		Roles:     roles,
		Disabled:  disabled,
		CreatedAt: createdAt.UTC().Format(time.RFC3339),
		UpdatedAt: updatedAt.UTC().Format(time.RFC3339),
	}

	if lastLogin != nil && !lastLogin.IsZero() {
		lastLoginStr := lastLogin.UTC().Format(time.RFC3339)
		response.LastLogin = &lastLoginStr
	}

	return response
}

// NewLoginResponse creates a new login response
func NewLoginResponse(accessToken, refreshToken string, expiresIn int, user UserResponse) *LoginResponse {
	return &LoginResponse{
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
		TokenType:    "Bearer",
		ExpiresIn:    expiresIn,
		User:         user,
	}
}

// NewUserListResponse creates a new user list response
func NewUserListResponse(users []UserResponse, total, page, limit int) *UserListResponse {
	return &UserListResponse{
		Users: users,
		Total: total,
		Page:  page,
		Limit: limit,
	}
}

// AuthStatusResponse represents the authentication status
type AuthStatusResponse struct {
	Authenticated bool         `json:"authenticated" example:"true"`
	User          UserResponse `json:"user"`
	TokenType     string       `json:"token_type" example:"Bearer"`
	ExpiresAt     *string      `json:"expires_at,omitempty" example:"2023-12-01T11:30:00Z"`
}